#include "Noise.h"
#include "Math_Vector.h"

const i32 p[] = {
  151,160,137,91,90,15,
  131,13,201,95,96,53,194,233,7,225,140,36,103,30,69,142,8,99,37,240,21,10,23,
  190, 6,148,247,120,234,75,0,26,197,62,94,252,219,203,117,35,11,32,57,177,33,
  88,237,149,56,87,174,20,125,136,171,168, 68,175,74,165,71,134,139,48,27,166,
  77,146,158,231,83,111,229,122,60,211,133,230,220,105,92,41,55,46,245,40,244,
  102,143,54, 65,25,63,161, 1,216,80,73,209,76,132,187,208, 89,18,169,200,196,
  135,130,116,188,159,86,164,100,109,198,173,186, 3,64,52,217,226,250,124,123,
  5,202,38,147,118,126,255,82,85,212,207,206,59,227,47,16,58,17,182,189,28,42,
  223,183,170,213,119,248,152, 2,44,154,163, 70,221,153,101,155,167, 43,172,9,
  129,22,39,253, 19,98,108,110,79,113,224,232,178,185, 112,104,218,246,97,228,
  251,34,242,193,238,210,144,12,191,179,162,241, 81,51,145,235,249,14,239,107,
  49,192,214, 31,181,199,106,157,184, 84,204,176,115,121,50,45,127, 4,150,254,
  138,236,205,93,222,114,67,29,24,72,243,141,128,195,78,66,215,61,156,180,
  151,160,137,91,90,15,
  131,13,201,95,96,53,194,233,7,225,140,36,103,30,69,142,8,99,37,240,21,10,23,
  190, 6,148,247,120,234,75,0,26,197,62,94,252,219,203,117,35,11,32,57,177,33,
  88,237,149,56,87,174,20,125,136,171,168, 68,175,74,165,71,134,139,48,27,166,
  77,146,158,231,83,111,229,122,60,211,133,230,220,105,92,41,55,46,245,40,244,
  102,143,54, 65,25,63,161, 1,216,80,73,209,76,132,187,208, 89,18,169,200,196,
  135,130,116,188,159,86,164,100,109,198,173,186, 3,64,52,217,226,250,124,123,
  5,202,38,147,118,126,255,82,85,212,207,206,59,227,47,16,58,17,182,189,28,42,
  223,183,170,213,119,248,152, 2,44,154,163, 70,221,153,101,155,167, 43,172,9,
  129,22,39,253, 19,98,108,110,79,113,224,232,178,185, 112,104,218,246,97,228,
  251,34,242,193,238,210,144,12,191,179,162,241, 81,51,145,235,249,14,239,107,
  49,192,214, 31,181,199,106,157,184, 84,204,176,115,121,50,45,127, 4,150,254,
  138,236,205,93,222,114,67,29,24,72,243,141,128,195,78,66,215,61,156,180

};
static f64 Fade(f64 x) {
  return x * x * x * (x * (x * 6 - 15) + 10);
}
static f64 Gradient(int hash, f64 x, f64 y){
  switch(hash & 3){
  case 0: return x + y;
  case 1: return -x + y;
  case 2: return x - y;
  case 3: return -x - y;
  default: return 0;
  }
}
static double Lerp(f64 t, f64 a, f64 b){
  return ((1 - t) * a + t * b);
  return a + t * (b - a);
}

f64 PerlinNoise2D(f64 x, f64 y){
  i32 xIndex = ((i32)x) & 255;
  i32 yIndex = ((i32)y) & 255;
  
  i32 g0  = p[p[xIndex] + yIndex];
  i32 g1  = p[p[xIndex + 1] + yIndex];
  i32 g2  = p[p[xIndex] + yIndex + 1];
  i32 g3  = p[p[xIndex + 1] + yIndex + 1];
  
  f64 xfract = x - (i32)x;                                
  f64 yfract = y - (i32)y;

  f64 d0 = Gradient(g0, xfract, yfract);
  f64 d1 = Gradient(g1, xfract - 1, yfract);
  f64 d2 = Gradient(g2, xfract, yfract - 1);
  f64 d3 = Gradient(g3, xfract - 1, yfract - 1);

  f64 u = Fade(xfract);
  f64 v = Fade(yfract);

  f64 x1_lerp = Lerp(u, d0, d1);
  f64 x2_lerp = Lerp(u, d2, d3);
  return Lerp(v, x1_lerp, x2_lerp);
}
